// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sentiment {
  id               Int      @id @default(autoincrement())
  sentimentText    String
  sntimentAnalysis String
  enteredAt        DateTime @default(now())
  employee         Employee @relation(fields: [employeeId], references: [id])
  employeeId       Int
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String // Changed from Int to String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int      @unique // Ensuring one-to-one relation
}

model Employee {
  id           Int               @id @default(autoincrement()) 
  firstName    String
  lastName     String
  role         String
  user         User?
  Sentiment    Sentiment[]
  Note         Note[]
  Login        Login[]
  Productivity Productivity[]
  burnOutRisk  burnOutRisk[]
  sessions     TherapySessions[]
}

model Login {
  id         Int      @id @default(autoincrement())
  time       DateTime @default(now())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
}

model Productivity {
  id          Int      @id @default(autoincrement())
  durationHrs Int
  employee    Employee @relation(fields: [employeeId], references: [id])
  employeeId  Int
}

model burnOutRisk {
  id         Int      @id @default(autoincrement())
  risk       String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
}

model TherapySessions {
  id         Int       @id @default(autoincrement())
  date       DateTime
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId Int?
  reserved   Boolean   @default(false)
}

model Note {
  id         Int      @id @default(autoincrement())
  noteText   String
  createdAt  DateTime @default(now())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
}
